AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: testEnviroment

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  InstanceCount:
    Description: Desired number of EC2 instances to launch
    Type: Number
    Default: 2

  InstanceCountMin:
    Description: Minimum number of EC2 instances to launch
    Type: Number
    Default: 2
  
  InstanceCountMax:
    Description: Maximum number of EC2 instances to launch
    Type: Number
    Default: 4

  CognitoDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a string. Must be alpha numeric 3-63 in length.
    
  KeyName:
    Type: String

Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
    us-west-2:
      HVM64: ami-01e24be29428c15b2
      HVMG2: ami-0fe84a5b4563d8f27

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

#  NatGateway1EIP:
#    Type: AWS::EC2::EIP
#    DependsOn: InternetGatewayAttachment
#    Properties:
#      Domain: vpc

#  NatGateway2EIP:
#    Type: AWS::EC2::EIP
#    DependsOn: InternetGatewayAttachment
#    Properties:
#      Domain: vpc

#  NatGateway1:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt NatGateway1EIP.AllocationId
#      SubnetId: !Ref PublicSubnet1

#  NatGateway2:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt NatGateway2EIP.AllocationId
#      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

#  DefaultPrivateRoute1:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable1
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

#  DefaultPrivateRoute2:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable2
#      DestinationCidrBlock: 0.0.0.0/0
#     NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC


#Up to this point VPC and subnets creation

#Bastion config 
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 
        'Fn::FindInMap':
          - AWSRegionArch2AMI
          - Ref: 'AWS::Region'
          - 'Fn::FindInMap':
              - AWSInstanceType2Arch
              - t2.micro
              - Arch
      InstanceType: t2.micro
      KeyName: !Ref Keyname
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: BastionInstance

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Bastion host"
      VpcId: !Ref VPC

  BastionAllowInboundSSHFromInternet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  BastionAllowOutboundSSHToApplication:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref ApplicationSecurityGroup


  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Sub 'Internal Security group for ${AWS::StackName}'
      VpcId: !Ref VPC

  ApplicationAllowInboundSSHFromBastion:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ApplicationSecurityGroup #database security group
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref BastionSecurityGroup

  BastionKey:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyName: bastionkey

#End Bastion

#Cognito

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration: 
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true


  UserPoolClient:
    DependsOn: LoadBalancer
    DependsOn: ALBListener
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${CognitoDomain}-user-pool
      GenerateSecret: true
      UserPoolId: !Ref UserPool
      CallbackURLs: 
        - !Sub https://${LoadBalancer.DNSName} 
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
      SupportedIdentityProviders:
        - COGNITO


  UserPoolTestDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref CognitoDomain

#End Cognito

#Load Balancer
  

  LoadBalancer:
    DependsOn: LoadBalancerSecurityGroup
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Capstone-Load-Balancer
      Scheme: internet-facing
      Type: application
      Subnets: 
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups: 
        - Ref: LoadBalancerSecurityGroup
      IpAddressType: ipv4


  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 25
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VPC

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on port 443
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

#End Load Balancer

#Auto Scaling Group


  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: ASG security group
      GroupName: AppSecurityGroup
      VpcId:
        Ref: VPC

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: projectASG
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      HealthCheckGracePeriod: 300 
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref WebServerLaunchTemplate
      MinSize: !Ref InstanceCountMin
      MaxSize: !Ref InstanceCountMax
      DesiredCapacity: !Ref InstanceCount
      Tags:
        - Key: Name
          Value: AS-WebServer
          PropagateAtLaunch: true
      TargetGroupARNs: 
        - !Ref ALBTargetGroup

  WebServerLaunchTemplate:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: projecLT
      ImageId: 
        'Fn::FindInMap':
          - AWSRegionArch2AMI
          - Ref: 'AWS::Region'
          - 'Fn::FindInMap':
              - AWSInstanceType2Arch
              - t2.micro
              - Arch
      InstanceType: t2.micro 
      SecurityGroups: 
       - !Ref AppSecurityGroup
      UserData: IyEvYmluL2Jhc2gKc3VkbyBlY2hvICJkZWIgaHR0cDovL2NyYW4ucnN0dWRpby5jb20vYmluL2xpbnV4L3VidW50dSB0cnVzdHkvIiB8IHN1ZG8gdGVlIC1hIC9ldGMvYXB0L3NvdXJjZXMubGlzdApncGcgLS1rZXlzZXJ2ZXIga2V5c2VydmVyLnVidW50dS5jb20gLS1yZWN2LWtleSBFMjk4QTNBODI1QzBENjVERkQ1N0NCQjY1MTcxNjYxOUUwODREQUI5CmdwZyAtYSAtLWV4cG9ydCBFMjk4QTNBODI1QzBENjVERkQ1N0NCQjY1MTcxNjYxOUUwODREQUI5CnN1ZG8geXVtIC15IHVwZGF0ZQpzdWRvIHl1bSBpbnN0YWxsIC15IGVwZWwtcmVsZWFzZQpzdWRvIHl1bSBpbnN0YWxsIC15IFIKc3VkbyBzdSAtIC1jICJSIC1lIFwiaW5zdGFsbC5wYWNrYWdlcygnc2hpbnknLCByZXBvcz0naHR0cHM6Ly9jcmFuLnJzdHVkaW8uY29tLycpXCIiCnN1ZG8geXVtIGluc3RhbGwgLXkgZ2RlYmktY29yZQpzdWRvIHl1bSBpbnN0YWxsIC15IGxpYmN1cmwtZGV2ZWwKc3VkbyB5dW0gaW5zdGFsbCAteSBsaWJ4bWwyLWRldmVsCndnZXQgaHR0cHM6Ly9kb3dubG9hZDMucnN0dWRpby5vcmcvY2VudG9zNy94ODZfNjQvc2hpbnktc2VydmVyLTEuNS4xOC45ODcteDg2XzY0LnJwbQpzdWRvIHl1bSBpbnN0YWxsIC15IC0tbm9ncGdjaGVjayBzaGlueS1zZXJ2ZXItMS41LjE4Ljk4Ny14ODZfNjQucnBtCnN1ZG8gc3UgLSAtYyAiUiAtZSBcImluc3RhbGwucGFja2FnZXMoYygndGlkeXZlcnNlJywgJ2pzb25saXRlJywgJ3NoaW55dGhlbWVzJywgJ2RwbHlyJywgJ3Bsb3RseScsICdwbmcnLCAnZ2dwbG90MicsICdnZ2pveScpLCByZXBvcz0naHR0cHM6Ly9jcmFuLnJzdHVkaW8uY29tLycpXCIiCndnZXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3Bhd2VsOTlrL1N0dWRpYS9tYXN0ZXIvUi9UZWNobmlraVdpenVhbGl6YWNqaURhbnljaC9Qcm9qZWt0Mi9uZXdlc3QvYXBwLlIKd2dldCBodHRwczovL2dpdGh1Yi5jb20vcGF3ZWw5OWsvU3R1ZGlhL3Jhdy9tYXN0ZXIvUi9UZWNobmlraVdpenVhbGl6YWNqaURhbnljaC9Qcm9qZWt0Mi9uZXdlc3QvY2xpY2ttZS5wbmcKc3VkbyBybSAtciAvc3J2L3NoaW55LXNlcnZlci8qCnN1ZG8gbXYgY2xpY2ttZS5wbmcgL3Nydi9zaGlueS1zZXJ2ZXIKc3VkbyBtdiBhcHAuUiAvc3J2L3NoaW55LXNlcnZlcg==


#end Auto scaling group

#Database






